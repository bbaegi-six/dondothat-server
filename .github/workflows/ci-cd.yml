name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    permissions:
      checks: write

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: dondothat1234
          MYSQL_DATABASE: dondothat
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping -h localhost"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Wait for MySQL to be ready
        run: |
          for i in {30..0}; do
            if mysqladmin ping -h"127.0.0.1" --silent; then
              echo "MySQL is ready"
              break
            fi
            echo "Waiting for MySQL... ($i seconds remaining)"
            sleep 1
          done
          if [ "$i" = 0 ]; then
            echo "MySQL failed to start"
            exit 1
          fi

      - name: Verify MySQL connection and create test database
        run: |
          mysql -h127.0.0.1 -uroot -pdondothat1234 -e "SELECT VERSION();"
          mysql -h127.0.0.1 -uroot -pdondothat1234 << 'EOF'
          DROP DATABASE IF EXISTS dondothat;
          CREATE DATABASE dondothat;
          USE dondothat;

          -- 사용자 테이블
          CREATE TABLE `user` (
              `user_id` BIGINT NOT NULL AUTO_INCREMENT,
              `name` VARCHAR(255) NOT NULL,
              `email` VARCHAR(255) NOT NULL,
              `password` VARCHAR(255) NOT NULL,    
              `point` BIGINT NOT NULL,
              `nickname` VARCHAR(255) NOT NULL,
              `created_at` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
              `updated_at` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
              PRIMARY KEY (`user_id`)
          );

          -- 카테고리 테이블 (챌린지용)
          CREATE TABLE `category` (
              `category_id` BIGINT NOT NULL AUTO_INCREMENT,
              `name` VARCHAR(255) NOT NULL,
              `icon_url` VARCHAR(255) NOT NULL,
              PRIMARY KEY (`category_id`)
          );

          -- 챌린지 테이블
          CREATE TABLE `challenge` (
              `challenge_id` BIGINT NOT NULL AUTO_INCREMENT,
              `category_id` BIGINT NOT NULL,
              `title` VARCHAR(255) NOT NULL,
              `summary` VARCHAR(255) NOT NULL,
              `description` VARCHAR(255) NOT NULL,
              PRIMARY KEY (`challenge_id`),
              FOREIGN KEY (`category_id`) REFERENCES `category`(`category_id`) ON DELETE CASCADE
          );

          -- 챌린지 참여 테이블
          CREATE TABLE `user_challenge` (
              `user_challenge_id` BIGINT NOT NULL AUTO_INCREMENT,
              `user_id` BIGINT NOT NULL,
              `challenge_id` BIGINT NOT NULL,
              `status` ENUM('ongoing', 'completed', 'failed') NOT NULL,
              `period` BIGINT NOT NULL,
              `progress` BIGINT NOT NULL,
              `start_date` TIMESTAMP NOT NULL,
              `end_date` TIMESTAMP NOT NULL,
              `point` BIGINT NOT NULL,
              PRIMARY KEY (`user_challenge_id`),
              FOREIGN KEY (`user_id`) REFERENCES `user`(`user_id`) ON DELETE CASCADE,
              FOREIGN KEY (`challenge_id`) REFERENCES `challenge`(`challenge_id`) ON DELETE CASCADE
          );

          -- 채팅 메시지 테이블
          CREATE TABLE `chat_message` (
              `message_id` BIGINT NOT NULL AUTO_INCREMENT,
              `user_id` BIGINT NOT NULL,
              `challenge_id` BIGINT NOT NULL,
              `message` VARCHAR(255) NOT NULL,
              `sent_at` TIMESTAMP NOT NULL,
              `message_type` VARCHAR(20) DEFAULT 'MESSAGE' NOT NULL,
              PRIMARY KEY (`message_id`),
              FOREIGN KEY (`user_id`) REFERENCES `user`(`user_id`) ON DELETE CASCADE,
              FOREIGN KEY (`challenge_id`) REFERENCES `challenge`(`challenge_id`) ON DELETE CASCADE
          );

          -- expenditure 테이블 추가 (테스트에서 필요)
          CREATE TABLE `expenditure` (
              `expenditure_id` BIGINT NOT NULL AUTO_INCREMENT,
              `user_id` BIGINT NOT NULL,
              `category_id` BIGINT NOT NULL,
              `asset_id` BIGINT NOT NULL,
              `amount` BIGINT NOT NULL,
              `description` VARCHAR(255),
              `expenditure_date` TIMESTAMP NOT NULL,
              `created_at` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
              `updated_at` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
              PRIMARY KEY (`expenditure_id`),
              FOREIGN KEY (`user_id`) REFERENCES `user`(`user_id`) ON DELETE CASCADE,
              FOREIGN KEY (`category_id`) REFERENCES `category`(`category_id`) ON DELETE CASCADE
          );

          -- user_asset 테이블 추가
          CREATE TABLE `user_asset` (
              `asset_id` BIGINT NOT NULL AUTO_INCREMENT,
              `user_id` BIGINT NOT NULL,
              `asset_name` VARCHAR(255) NOT NULL,
              `balance` BIGINT NOT NULL,
              `bank_name` VARCHAR(255) NOT NULL,
              `bank_account` VARCHAR(255) NOT NULL,
              `bank_id` VARCHAR(255),
              `bank_pw` VARCHAR(255),
              `connected_id` VARCHAR(255),
              `created_at` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
              PRIMARY KEY (`asset_id`),
              FOREIGN KEY (`user_id`) REFERENCES `user`(`user_id`) ON DELETE CASCADE
          );

          -- 테스트에 필요한 데이터 삽입
          -- 사용자 (user_id = 1)
          INSERT INTO `user` (name, email, password, point, nickname)
          VALUES ('testuser', 'test@example.com', 'password123', 0, '테스트유저');
          -- 추가 사용자 데이터
          INSERT INTO `user` (name, email, password, point, nickname)
          VALUES ('testuser2', 'test2@example.com', 'password123', 0, '테스트유저2');
          -- 카테고리 (category_id = 1, 2)
          INSERT INTO `category` (category_id, name, icon_url)
          VALUES (1, '식비', 'default_icon_url'),(2, '교통비', 'default_icon_url');
          -- 자산 (asset_id = 1, user_id = 1)
          INSERT INTO `user_asset` (user_id, asset_name, balance, bank_name, created_at, bank_account, bank_id, bank_pw, connected_id) 
          VALUES (1, '테스트은행 계좌', 1000000, '테스트은행', NOW(), '110-123-456789', 'test_bank_id', 'test_pw', 'test_conn_id');
          -- 챌린지 1개
          INSERT INTO challenge (category_id, title, summary, description)
          VALUES (1, '매일 1시간 걷기', '건강을 위한 첫 걸음', '매일 1시간씩 걸으며 건강한 습관을 기릅니다.');
          -- 챌린지 참여
          INSERT INTO user_challenge (user_id, challenge_id, status, period, progress, start_date, end_date, point)
          VALUES 
          (1, 1, 'ongoing', 30, 5, NOW(), DATE_ADD(NOW(), INTERVAL 30 DAY), 100),
          (2, 1, 'ongoing', 30, 2, NOW(), DATE_ADD(NOW(), INTERVAL 30 DAY), 100);
          EOF
          
          mysql -h127.0.0.1 -uroot -pdondothat1234 -e "SHOW DATABASES;"

      - name: Run tests
        run: |
          set -x
          ./gradlew --version
          java -classpath gradle/wrapper/gradle-wrapper.jar org.gradle.wrapper.GradleWrapperMain tasks
          java -classpath gradle/wrapper/gradle-wrapper.jar org.gradle.wrapper.GradleWrapperMain test
        env:
          SPRING_PROFILES_ACTIVE: test
          DB_HOST: 127.0.0.1
          DB_PORT: 3306
          DB_NAME: dondothat
          DB_USER: root
          DB_PASSWORD: dondothat1234

      - name: Generate test report
        uses: dorny/test-reporter@v1
        if: success() || failure()
        with:
          name: Gradle Tests
          path: build/test-results/test/*.xml
          reporter: java-junit
          fail-on-error: true

  build-and-push:
    needs: test
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Build with Gradle
        run: java -classpath gradle/wrapper/gradle-wrapper.jar org.gradle.wrapper.GradleWrapperMain build -x test

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ghcr.io/${{ github.repository_owner }}/dondothat:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    needs: [test, build-and-push]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'  # 배포는 main 브랜치만

    steps:
      - name: Deploy with Docker Compose
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          timeout: 300s
          script: |
            # Docker Compose 파일 생성 (Spring Legacy + Tomcat)
            cat > docker-compose.yml << 'EOF'
            version: "3.8"
            
            services:
              dondothat-server:
                image: ghcr.io/${{ github.repository_owner }}/dondothat:latest
                container_name: dondothat-server
                ports:
                  - "8080:8080"
                environment:
                  - SPRING_PROFILES_ACTIVE=prod
                  - DB_HOST=mysql-server
                  - DB_USERNAME=root
                  - DB_PASSWORD=dondothat1234
                  - DB_NAME=dondothat
                depends_on:
                  - mysql
                networks:
                  - dondothat-network
                restart: unless-stopped
            
              mysql:
                image: mysql:8.0
                container_name: mysql-server
                environment:
                  - MYSQL_ROOT_PASSWORD=dondothat1234
                  - MYSQL_DATABASE=dondothat
                ports:
                  - "3306:3306"
                volumes:
                  - mysql_data:/var/lib/mysql
                networks:
                  - dondothat-network
                restart: unless-stopped
            
            networks:
              dondothat-network:
                driver: bridge
            
            volumes:
              mysql_data:
            EOF
            
            # 최신 이미지 pull
            docker pull ghcr.io/${{ github.repository_owner }}/dondothat:latest
            
            # 서비스 재시작
            /usr/local/bin/docker-compose down || true
            /usr/local/bin/docker-compose up -d
            
            # 상태 확인
            sleep 15
            /usr/local/bin/docker-compose ps
            /usr/local/bin/docker-compose logs --tail=10 dondothat-server
