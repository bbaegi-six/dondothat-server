name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    permissions:
      checks: write

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: dondothat
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping -h localhost"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Wait for MySQL to be ready
        run: |
          for i in {30..0}; do
            if mysqladmin ping -h"127.0.0.1" --silent; then
              echo "MySQL is ready"
              break
            fi
            echo "Waiting for MySQL... ($i seconds remaining)"
            sleep 1
          done
          if [ "$i" = 0 ]; then
            echo "MySQL failed to start"
            exit 1
          fi

      - name: Verify MySQL connection and create test database
        run: |
          mysql -h127.0.0.1 -uroot -proot -e "SELECT VERSION();"
          mysql -h127.0.0.1 -uroot -proot -e "CREATE DATABASE IF NOT EXISTS dondothat CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;"
          mysql -h127.0.0.1 -uroot -proot -e "SHOW DATABASES;"

      - name: Run tests
        run: |
          set -x
          ./gradlew --version
          java -classpath gradle/wrapper/gradle-wrapper.jar org.gradle.wrapper.GradleWrapperMain tasks
          java -classpath gradle/wrapper/gradle-wrapper.jar org.gradle.wrapper.GradleWrapperMain test
        env:
          SPRING_PROFILES_ACTIVE: test

      - name: Generate test report
        uses: dorny/test-reporter@v1
        if: success() || failure()
        with:
          name: Gradle Tests
          path: build/test-results/test/*.xml
          reporter: java-junit
          fail-on-error: true

  build-and-push:
    needs: test
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Build with Gradle
        run: java -classpath gradle/wrapper/gradle-wrapper.jar org.gradle.wrapper.GradleWrapperMain build -x test

      - name: Create Dockerfile
        run: |
          cat > Dockerfile << 'EOF'
          FROM eclipse-temurin:17-jre-alpine
          
          WORKDIR /app
          
          COPY build/libs/*.war app.war
          
          EXPOSE 8080
          
          ENV SPRING_PROFILES_ACTIVE=prod
          
          ENTRYPOINT ["java", "-Xmx400m", "-jar", "app.war"]
          EOF

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/dondothat:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    needs: [test, build-and-push]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          timeout: 300s
          script: |
            # 기존 컨테이너 중지 및 제거
            docker stop dondothat-server || true
            docker rm dondothat-server || true
            
            # 새 이미지 pull
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/dondothat:latest
            
            # 새 컨테이너 실행
            docker run -d \
              --name dondothat-server \
              -p 8080:8080 \
              -e SPRING_PROFILES_ACTIVE=prod \
              -e DB_HOST=${{ secrets.DB_HOST }} \
              -e DB_USERNAME=${{ secrets.DB_USERNAME }} \
              -e DB_PASSWORD=${{ secrets.DB_PASSWORD }} \
              -e DB_NAME=${{ secrets.DB_NAME }} \
              --restart unless-stopped \
              ${{ secrets.DOCKERHUB_USERNAME }}/dondothat:latest
            
            # 잠시 기다린 후 상태 확인
            sleep 10
            docker ps
            docker logs dondothat-server --tail=20
            
            # 헬스체크 (선택사항)
            curl -f http://localhost:8080/actuator/health || echo "Health check failed"