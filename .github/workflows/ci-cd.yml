name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Install Gradle manually
        run: |
          wget -q https://services.gradle.org/distributions/gradle-8.8-bin.zip
          unzip -q gradle-8.8-bin.zip
          export PATH=$PATH:$(pwd)/gradle-8.8/bin
          gradle --version

      - name: Build with Gradle
        run: |
          export PATH=$PATH:$(pwd)/gradle-8.8/bin
          gradle build -x test

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ghcr.io/${{ github.repository_owner }}/dondothat:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    needs: [build-and-push]
    runs-on: ubuntu-latest
    if: (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop') && github.event_name == 'push'

    steps:
      - name: Deploy with Docker Compose
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          timeout: 300s
          script: |
            # Docker Compose 파일 생성 (Spring Legacy + Tomcat)
            cat > docker-compose.yml << 'EOF'
            version: "3.8"
            
            services:
              dondothat-server:
                image: ghcr.io/${{ github.repository_owner }}/dondothat:latest
                container_name: dondothat-server
                ports:
                  - "8080:8080"
                environment:
                  - SPRING_PROFILES_ACTIVE=prod
                  - DB_HOST=mysql-server
                  - DB_USERNAME=root
                  - DB_PASSWORD=dondothat1234
                  - DB_NAME=dondothat
                depends_on:
                  - mysql
                networks:
                  - dondothat-network
                restart: unless-stopped
            
              mysql:
                image: mysql:8.0
                container_name: mysql-server
                environment:
                  - MYSQL_ROOT_PASSWORD=dondothat1234
                  - MYSQL_DATABASE=dondothat
                ports:
                  - "3306:3306"
                volumes:
                  - mysql_data:/var/lib/mysql
                networks:
                  - dondothat-network
                restart: unless-stopped
            
            networks:
              dondothat-network:
                driver: bridge
            
            volumes:
              mysql_data:
            EOF
            
            # 최신 이미지 pull
            docker pull ghcr.io/${{ github.repository_owner }}/dondothat:latest
            
            # 서비스 재시작
            /usr/local/bin/docker-compose down || true
            /usr/local/bin/docker-compose up -d
            
            # 상태 확인
            sleep 15
            /usr/local/bin/docker-compose ps
            /usr/local/bin/docker-compose logs --tail=10 dondothat-server
