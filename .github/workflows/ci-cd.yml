name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    permissions:
      checks: write

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: dondothat
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping -h localhost"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Wait for MySQL to be ready
        run: |
          for i in {30..0}; do
            if mysqladmin ping -h"127.0.0.1" --silent; then
              echo "MySQL is ready"
              break
            fi
            echo "Waiting for MySQL... ($i seconds remaining)"
            sleep 1
          done
          if [ "$i" = 0 ]; then
            echo "MySQL failed to start"
            exit 1
          fi

      - name: Verify MySQL connection and create test database
        run: |
          mysql -h127.0.0.1 -uroot -proot -e "SELECT VERSION();"
          mysql -h127.0.0.1 -uroot -proot -e "CREATE DATABASE IF NOT EXISTS dondothat CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;"
          mysql -h127.0.0.1 -uroot -proot -e "SHOW DATABASES;"

      - name: Debugging before tests
        run: |
          pwd
          ls -la

      - name: Run tests
        run: |
          set -x
          ./gradlew --version
                    java -classpath gradle/wrapper/gradle-wrapper.jar org.gradle.wrapper.GradleWrapperMain tasks
          java -classpath gradle/wrapper/gradle-wrapper.jar org.gradle.wrapper.GradleWrapperMain test
        env:
          SPRING_PROFILES_ACTIVE: test

      - name: Generate test report
        uses: dorny/test-reporter@v1
        if: success() || failure()
        with:
          name: Gradle Tests
          path: build/test-results/test/*.xml
          reporter: java-junit
          fail-on-error: true

  build:
    needs: test
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Build with Gradle
        run: java -classpath gradle/wrapper/gradle-wrapper.jar org.gradle.wrapper.GradleWrapperMain build -x test

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: war-artifact
          path: build/libs/*.war

  deploy:
    needs: [test, build]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - uses: actions/checkout@v3

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: war-artifact
          path: build/libs/

      - name: Verify deploy.sh exists on runner
        run: ls -la deploy.sh

      - name: Verify WAR file on runner before SCP
        run: ls -la build/libs/DonDoThat-1.0-SNAPSHOT.war

      - name: Upload WAR to EC2
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "build/libs/"
          target: "/home/${{ secrets.EC2_USERNAME }}/"
          debug: true

      - name: Upload deploy.sh to EC2
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "deploy.sh"
          target: "/home/${{ secrets.EC2_USERNAME }}/"

      - name: Run deploy script on EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            export DB_HOST=${{ secrets.DB_HOST }}
            export DB_USERNAME=${{ secrets.DB_USERNAME }}
            export DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            export DB_NAME=${{ secrets.DB_NAME }}
            export SPRING_PROFILES_ACTIVE=prod
            export EC2_USERNAME=${{ secrets.EC2_USERNAME }}
            
            ls -la /home/${{ secrets.EC2_USERNAME }}/
            chmod +x /home/${{ secrets.EC2_USERNAME }}/deploy.sh
            sudo /home/${{ secrets.EC2_USERNAME }}/deploy.sh
